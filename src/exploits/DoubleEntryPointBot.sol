// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "../interfaces/IDoubleEntryPoint.sol";
import "../interfaces/IForta.sol";

contract DoubleEntryPointBot {
    IDoubleEntryPoint doubleEntryPoint;

    constructor(IDoubleEntryPoint _doubleEntryPoint) {
        doubleEntryPoint = _doubleEntryPoint;
    }

    function handleTransaction(address user, bytes calldata msgData) external {
        IForta forta = IForta(doubleEntryPoint.forta());

        (, , address origSender) = abi.decode(
            msgData[4:],
            (address, uint256, address)
        );

        // probably it's a good idea to use a more complex condition here (e.g. also check if recipient is sweptTokensRecipient)
        // to block only sweeps from the vault, not all transfers
        // but this is good enough to solve the level
        if (origSender == doubleEntryPoint.cryptoVault()) {
            forta.raiseAlert(user);
        }
    }
}
